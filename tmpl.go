package main

const tmpl = `// This code was autogenerated from protoc-gen-dragonboat, do not edit.
package {{ package . }}

import (
	"fmt"
	// "context"

	"google.golang.org/protobuf/proto"
	sm "github.com/lni/dragonboat/v3/statemachine"
	anypb "google.golang.org/protobuf/types/known/anypb"

	"github.com/LilithGames/protoc-gen-dragonboat/runtime"
)
{{- range .Services }}
{{- $svc := .Name }}

type I{{ $svc }}Server interface {
{{- range .Methods }}
	{{ name . }}(req *{{ name .Input }}) (*{{ name .Output }}, error)
{{- end }}
}

func Dragonboat{{ $svc }}Lookup(s I{{ $svc }}Server, query interface{}) (interface{}, error) {
	switch q := query.(type) {
{{- range .Methods }}
{{- $moptions := options . }}
{{- $mtype := default $moptions.Type "query" }}
{{- if (eq $mtype "query")}}
	case *{{ name .Input }}:
		resp, err := s.{{ name . }}(q)
		if err != nil {
			return resp, fmt.Errorf("I{{ $svc }}Server.{{ name . }}(%v) err: %w", q, err)
		}
		return resp, nil
{{- end }}
{{- end }}
	default:
		return nil, fmt.Errorf("unknown query type: %T", q)
	}
}

func Dragonboat{{ $svc }}Update(s I{{ $svc }}Server, data []byte) (sm.Result, error) {
	req := runtime.DragonboatRequest{}
	if err := proto.Unmarshal(data, &req); err != nil {
		return runtime.MakeDragonboatResult(nil, fmt.Errorf("DragonboatRequest unmarshal err: %w", err)), nil
	}
	msg, err := anypb.UnmarshalNew(req.Data, proto.UnmarshalOptions{DiscardUnknown: true})
	if err != nil {
		return runtime.MakeDragonboatResult(nil, fmt.Errorf("DragonboatRequest.Data unmarshal err: %w", err)), nil
	}
	switch m := msg.(type) {
{{- range .Methods }}
{{- $moptions := options . }}
{{- $mtype := default $moptions.Type "query" }}
{{- if (eq $mtype "mutation")}}
	case *{{ name .Input }}:
		resp, err := s.{{ name . }}(m)
		return runtime.MakeDragonboatResult(resp, err), nil
{{- end }}
{{- end }}
	default:
		return runtime.MakeDragonboatResult(nil, fmt.Errorf("unknown mutation type: %T", m)), nil
	}
}

{{- end }}
`
